pid /run/php/nginx.pid;
user www-data www-data;


# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;




events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
# rewrite_log on;

  include mime.types;
  default_type       application/octet-stream;
  # to boost I/O on HDD we can disable access logs
  access_log off;

  sendfile           on;
  tcp_nopush         on;
  keepalive_timeout  30;
  keepalive_requests 100000;



  tcp_nodelay        on;
  #php max upload limit cannot be larger than this       
  client_max_body_size 250m;
  #client_body_buffer_size 10K;
  #client_header_buffer_size 1k;
  #large_client_header_buffers 2 1k;


  ssl_certificate     /etc/nginx/tls/example.com.crt;
  ssl_certificate_key /etc/nginx/tls/example.com.key;
  ssl_ciphers         EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
  ssl_protocols       TLSv1.2;


  index              index.php index.html index.htm;

  gzip_proxied any;
  gzip on;
  gzip_min_length 10240;
  gzip_proxied expired no-cache no-store private auth;
  gzip_disable msie6;
  #gzip_comp_level 6;
  #gzip_buffers 16 8k;
  #gzip_http_version 1.1;
  #gzip_min_length 256;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;





# Upstream to abstract backend connection(s) for php
upstream php {
        #server unix:/tmp/php-cgi.socket;
        server 127.0.0.1:9000;
}

# Expires map
map $sent_http_content_type $expires {
    default                    2d;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    ~image/                    max;
}



server {
        ## Your website name goes here.
        listen              8443 ssl default_server;
        listen              8000 default_server;


        server_name domain.tld;
        ## Your only path reference.
        root /var/www/wordpress;
        ## This should be in your http block and if it is, it's not needed here.
        index index.php;
        expires $expires;

	#large_client_header_buffers 4 32k;

        location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

        location / {
                # This is cool because no php is touched for static content.
                # include the "?$args" part so non-default permalinks doesn't break when using query string
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                include fastcgi.conf;
                fastcgi_intercept_errors on;
                fastcgi_pass php;
                fastcgi_send_timeout 300s;
                fastcgi_read_timeout 300s;
        }

        #location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        #        root /var/www/wordpress;
        #        expires max;
        #        log_not_found off;
        #}
	        location /github-hook {
                # proxy the git-hook calls to the sidekick container
         	proxy_pass http://127.0.0.1:8080;       
        }
        ## Disable cache on news url




}
}
